fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg2(1.2)
sum()
print(sum)
HardyWeinberg2()
HardyWeinberg2(1.2)
HardyWeinberg2(0.5)
HardyWeinberg2(1.2)
z <- HardyWeinberg2(1.2)
print(z)
HardyWeinberg3(1.2)
HardyWeinberg3 <- function(p=runif(1)) {
if(p > 1.0 | p < 0.0) {
stop("Function failure: p must be >=0 and <=1")
}
q <- 1 - p
fAA <- p^2
fAB <- 2*p*q
fBB <- q^2
vecOut <- signif(c(p=p,AA=fAA,AB=fAB,BB=fBB),digits=3)
return(vecOut)
}
HardyWeinberg3(1.2)
z <- HardyWeinberg3(1.2)
myFunc <- function(a=3,b=4) {
z <- a + b
return(z)
}
myFunc()
print(z)
print(a)
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
myfuncBad()
b <- 10
myfuncBad()
b <- 10
myfuncBad()
myFuncBad <- function(a=3) {
z <- a + b
return(z)
}
b <- 10
myFuncBad()
myFuncBad() # function fails because b is not assigned
myFuncOK <- function(a=3) {
bb <- 100
z <- a + bb
return(z)
}
myFuncOK()
fitLinear <- function(x=runif(10),y=runif(10)){
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear()
library(ggmap)
install.packages("ggmap")
install.packages("ggplot2")
library(ggmap)
library(ggplot2)
Vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtmap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom=5, source="google",maptype="terrain")
ggmap(vtMap)
get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google", TRUE, TRUE)
vtMap <- get_map(location = c(lon = -72.695461, lat = 44.127084), zoom = "auto", scale = "auto", source = "google")
ggmap(vtMap)
vtMap
ggmap(vtMap)
map(vtMap)
install.packages("maps")
library(ggmap)
library(ggplot2)
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
vtMap
vtMap<-get_map(location=c(-72.6954,44.127),zoom="auto", scale="auto", source="google",maptype="terrain")
ggmap(vtMap)
install.packages("ggproto")
install.packages("ggmap", type = "source")
install.packages("ggmap", type = "source")
fitLinear2 <- function(x=NULL,y=NULL){
if(is.null(x) & is.null(y)) {
x <- runif(20)
y <- 0.5 + 2*x + rnorm(n=20, mean=0,sd=0.2)
}
myMod <- lm(y~x)
myOut <- c(slope=summary(myMod)$coefficients[2,1],
pvalue=summary(myMod)$coefficients[2,4])
plot(x=x,y=y)
return(myOut)
}
fitLinear2()
z <- c(runif(99),NA)
mean(z)
mean(x=z,na.rm=TRUE)
mean(x=z, na.rm=TRUE,trim=0.05)
####################################################################
# FUNCTION: GetData
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GetData <- function(){
return("testing...........GetData")
}
####################################################################
# FUNCTION: CalculateStuff
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
CalculateStuff <- function(){
return("testing...........CalculateStuff")
}
####################################################################
# FUNCTION: SummerizeOutput
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
SummerizeOutput <- function(){
return("testing...........SummerizeOutput")
}
####################################################################
# FUNCTION: GraphResults
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GraphResults <- function(){
return("testing...........GraphResults")
}
# Program Body
# GetData()
# CalculateStuff()
# SummarizeOutput()
# GraphResults()
####################################################################
# FUNCTION: GetData
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GetData <- function(){
return("testing...........GetData")
}
####################################################################
# FUNCTION: CalculateStuff
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
CalculateStuff <- function(){
return("testing...........CalculateStuff")
}
####################################################################
# FUNCTION: SummerizeOutput
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
SummerizeOutput <- function(){
return("testing...........SummerizeOutput")
}
####################################################################
# FUNCTION: GraphResults
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GraphResults <- function(){
return("testing...........GraphResults")
}
# Program Body
# GetData()
# CalculateStuff()
# SummarizeOutput()
# GraphResults()
GetData <- function(){
return("testing...........GetData")
}
GetData <- function(){
return("testing...........GetData")
}
GetData()
CalculateStuff()
SummarizeOutput()
GraphResults()
# Illustration of structured programming
# 9 March 2017
# SAA
####################################################################
# FUNCTION: GetData
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GetData <- function(){
return("testing...........GetData")
}
####################################################################
# FUNCTION: CalculateStuff
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
CalculateStuff <- function(){
return("testing...........CalculateStuff")
}
####################################################################
# FUNCTION: SummarizeOutput
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
SummarizeOutput <- function(){
return("testing...........SummarizeOutput")
}
####################################################################
# FUNCTION: GraphResults
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GraphResults <- function(){
return("testing...........GraphResults")
}
# Program Body
GetData()
CalculateStuff()
SummarizeOutput()
GraphResults()
source('~/CompBio/SourcingScript.R', echo=TRUE)
source("MyFunctions.R")
source("MyFunctions.R")
setwd("~/CompBio")
source("MyFunctions.R")
GetData()
CalculateStuff()
SummarizeOutput()
GraphResults()
FitRegressionModel <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
regModel <- lm(yVar~xVar,data=dataFrame)
return(summary(regModel))
}
FitRegressionModel()
FitRegressionModel <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
regModel <- lm(yVar~xVar,data=dataFrame)
return(summary(regModel))
}
FitRegressionModel()
SummarizeOutput <- function(z=NULL) {
if(is.null(z)) {
z<- summary(lm(runif(10)~runif(10)))
}
return(z$residuals)
}
SummarizeOutput()
GraphResults <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
plot(y=dataFrame$yVar,
x=dataFrame$xVar,
pch=21,
bg="lightblue",
cex=2)
regModel <- lm(yVar~xVar,data=dataFrame)
abline(regModel)
message("Message: Regression graph created")
}
GraphResults()
GraphResults <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
plot(y=dataFrame$yVar,
x=dataFrame$xVar,
pch=21,
bg="lightblue",
cex=2)
regModel <- lm(yVar~xVar,data=dataFrame)
abline(regModel)
message("Message: Regression graph created")
}
GraphResults()
GraphResults <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
plot(y=dataFrame$yVar,
x=dataFrame$xVar,
pch=21,
bg="lightblue",
cex=2)
regModel <- lm(yVar~xVar,data=dataFrame)
abline(regModel)
message("Message: Regression graph created")
}
GraphResults()
GraphResults <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
plot(y=dataFrame$yVar,
x=dataFrame$xVar,
pch=21,
bg="lightblue",
cex=2)
regModel <- lm(yVar~xVar,data=dataFrame)
abline(regModel)
message("Message: Regression graph created")
}
GraphResults()
GraphResults <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
plot(y=dataFrame$yVar,
x=dataFrame$xVar,
pch=21,
bg="lightblue",
cex=2)
regModel <- lm(yVar~xVar,data=dataFrame)
abline(regModel)
message("Message: Regression graph created")
}
GraphResults()
####################################################################
# FUNCTION: GetData
# one line description
# input: x
# output: x
# ------------------------------------------------------------------
GetData <- function(){
return("testing...........GetData")
}
####################################################################
# FUNCTION: CalculateStuff
# fits an ordinary least squares regression
# input: x and y numeric vectors of same length
# output: entire model summary from lm
# ------------------------------------------------------------------
FitRegressionModel <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
regModel <- lm(yVar~xVar,data=dataFrame)
return(summary(regModel))
}
FitRegressionModel()
####################################################################
# FUNCTION: SummarizeOutput
# pulls elements from lm model summary list
# input: list from model summary call of lm
# output: vector of regression residuals
# ------------------------------------------------------------------
SummarizeOutput <- function(z=NULL) {
if(is.null(z)) {
z<- summary(lm(runif(10)~runif(10)))
}
return(z$residuals)
}
SummarizeOutput()
####################################################################
# FUNCTION: GraphResults
# graph data and fitted OLS line
# input: x and y vector of numeric. same length
# output: creates graph
# ------------------------------------------------------------------
GraphResults <- function(xVar=runif(10),
yVar=runif(10)) {
dataFrame <- data.frame(xVar,yVar)
plot(y=dataFrame$yVar,
x=dataFrame$xVar,
pch=21,
bg="lightblue",
cex=2)
regModel <- lm(yVar~xVar,data=dataFrame)
abline(regModel)
message("Message: Regression graph created")
}
GraphResults()
# Program Body
GetData()
CalculateStuff()
SummarizeOutput()
GraphResults()
GetData <- function(fileName=NULL) {
if(is.null(fileName)){
dataframe <- data.frame(ID=1:10,
varA <- runif(10),
varB <- runif(10))
} else {
dataFrame <- read.table(file=fileName,
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
}
return(dataFrame)
GetData <- function(fileName=NULL) {
if(is.null(fileName)){
dataframe <- data.frame(ID=1:10,
varA <- runif(10),
varB <- runif(10))
} else {
dataFrame <- read.table(file=fileName,
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
}}
GetData <- function(fileName=NULL) {
if(is.null(fileName)){
dataframe <- data.frame(ID=1:10,
varA <- runif(10),
varB <- runif(10))
} else {
dataFrame <- read.table(file=fileName,
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
}
return(dataFrame)
}
GetData <- function(fileName=NULL) {
if(is.null(fileName)){
dataframe <- data.frame(ID=1:10,
varA <- runif(10),
varB <- runif(10))
} else {
dataFrame <- read.table(file=fileName,
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
}
return(dataFrame)
}
)
GetData <- function(fileName=NULL) {
if(is.null(fileName)){
dataframe <- data.frame(ID=1:10,
varA <- runif(10),
varB <- runif(10))
} else {
dataFrame <- read.table(file=fileName,
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
}
return(dataFrame)
}
GetData()
GetData <- function(fileName=NULL) {
if(is.null(fileName)){
dataFrame <- data.frame(ID=1:10,
varA <- runif(10),
varB <- runif(10))
} else {
dataFrame <- read.table(file=fileName,
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
}
return(dataFrame)
}
GetData()
install.packages("EpiModel", dependencies = TRUE)
devtools::install_github("statnet/EpiModel")
param <- param.dcm(inf.prob = 0.2, act.rate = 0.25)
init <- init.dcm(s.num = 500, i.num = 1)
param <- param.dcm(inf.prob = 0.2, act.rate = 0.25)
library(EpiModel)
param <- param.dcm(inf.prob = 0.2, act.rate = 0.25)
init <- init.dcm(s.num = 500, i.num = 1)
control <- control.dcm(type = "SI", nsteps = 500)
# save as mod
mod <- dcm(param, init, control)
mod
plot(mod)
summary(mod, at = 150)
summary(mod, at = 150)
# Simulation
param <- param.dcm(inf.prob = 0.2, act.rate = 1, rec.rate = 1/20,
b.rate = 1/95, ds.rate = 1/100, di.rate = 1/80, dr.rate = 1/100)
init <- init.dcm(s.num = 1000, i.num = 1, r.num = 0)
control <- control.dcm(type = "SIR", nsteps = 500, dt = 0.5)
mod <- dcm(param, init, control)
#Plotting
par(mar = c(3.2, 3, 2, 1), mgp = c(2, 1, 0), mfrow = c(1, 2))
plot(mod, popfrac = FALSE, alpha = 0.5,
lwd = 4, main = "Compartment Sizes")
plot(mod, y = "si.flow", lwd = 4, col = "firebrick",
main = "Disease Incidence", leg = "n")
#summaries
par(mfrow = c(1, 1))
comp_plot(mod, at = 50, digits = 1)
