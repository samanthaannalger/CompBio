xlab=unique(StationName),
ylab="Mean Daily Air Temperature (degrees C)"))
#Using other types of functions within ‘ddply’
# Use a linear model to examine how precipitation changes with air temperature within
# each month
precipTemp <- ddply(climate,
"Month",
function(x) {
model <- lm(Precip ~ AvgAirTemp, data=x)
setNames(coef(model), c("Intercept", "Slope"))
}
)
print(precipTemp)
#Creating graphs using ‘ddply’ output
# For each month, calculate and graph the mean and standard deviation for air temperature
monthlyData <- ddply(climate,
"Month",
summarise,
meanAirTemp=mean(AvgAirTemp),
sdAirTemp=sd(AvgAirTemp))
print(monthlyData)
head(x)
library(ggplot2)
p <- ggplot(monthlyData, aes(x=Month,y=meanAirTemp,colour=Month))
p <- p + geom_point(position=position_dodge(width=0.3), stat="identity", size = 3)
p <- p + geom_errorbar(aes(ymin=meanAirTemp-sdAirTemp, ymax=meanAirTemp+sdAirTemp),
width=.1,position=position_dodge(.3))
print(p)
# Spatial Data tutorial
# https://cran.r-project.org/doc/contrib/intro-spatial-rl.pdf
# 2017-04-18
# PACKAGES AND DATA READ IN------------------------------------
x <- c("ggmap", "rgdal", "rgeos", "maptools", "dplyr", "tidyr", "tmap")
#install.packages(x)
lapply(x, library, character.only = TRUE)
setwd("~/CompBio/CreatingMapsInR/Creating-maps-in-R-master") # setting working directory
lnd <- readOGR(dsn = "data", layer = "london_sport") # Read in the data
# STRUCTURE OF SPATIAL DATA IN R------------------------------
# spatial objects such as lnd are made up of different 'slots', key slots being '@data' (non geographic attribute data) and @polygons (or @lines for line data) (polygons that make up the physicial boundaries). Specific slots are accessed using the '@' symbol.
head(lnd@data, n = 2) # use the @ symbol to refer to the data slot of the lnd object
mean(lnd$Partic_Per) # use the $ symbol to refer to the Partic_Per column (a variable within the table) in the data slot, which was identified from the result of running the first line of code.
sapply(lnd@data, class) # To check the classes of all the variabes in a spatial dataset, you can use this command
lnd$Pop_2001 <- as.numeric(as.character(lnd$Pop_2001)) # Unexpectedly, Pop_2001 is a factor, coerce the variable into the correct, numeric format...
# type "lnd@" and then tab to see which slots are in lnd...
#check number of rows and columns...
nrow(lnd)
ncol(lnd)
# BASIC PLOTTING-------------------------------------------
plot(lnd)
# select rows of lnd@data where sports participation is less than 15
lnd@data[lnd$Partic_Per < 15, ] # This is interrogating the attribute data slot only of the lnd object..
#Using the same logic to subset and plot spatial objects (gometry slot)...
# Select zones where sports participation is between 20 and 25%
sel <- lnd$Partic_Per > 20 & lnd$Partic_Per < 25
plot(lnd[sel, ]) # output not shown here
head(sel) # test output of previous selection (not shown)
# To see these areas in context with other areas of the maps... use add= TRUE..
plot(lnd, col = "lightgrey") # plot the london_sport object
sel <- lnd$Partic_Per > 25
plot(lnd[ sel, ], col = "turquoise", add = TRUE) # add selected zones to map
#BLUE areas represent areas of high sports participation highlighted in blue
# Find the centre of the london area
lat <- coordinates(gCentroid(lnd))[[1]]
lng <- coordinates(gCentroid(lnd))[[2]]
# arguments to test whether or not a coordinate is east or north of the centre
east <- sapply(coordinates(lnd)[,1], function(x) x > lat)
north <- sapply(coordinates(lnd)[,2], function(x) x > lng)
# test if the coordinate is east and north of the centre
lnd@data$quadrant[east & north] <- "northeast"
vec <- vector(mode = "numeric", length = 3)
df <- data.frame(x = 1:3, y = c(1/2, 2/3, 3/4))
class(vec)
class(df)
head(df)
df
proj4string(lnd) <- NA_character_ # remove CRS information from lnd proj4string(lnd) <- CRS("+init=epsg:27700") # assign a new CRS
proj4string(lnd) <- CRS("+init=epsg:27700") # assign a new CRS
EPSG <- make_EPSG() # create data frame of available EPSG codes
EPSG[grepl("WGS 84$", EPSG$note), ] # search for WGS 84 code
lnd84 <- spTransform(lnd, CRS("+init=epsg:4326")) # reproject
# Save lnd84 object (we will use it in Part IV)
saveRDS(object = lnd84, file = "data/lnd84.Rds")
rm(lnd84) # remove the lnd object
library(rgdal) # ensure rgdal is loaded
# Create new object called "lnd" from "london_sport" shapefile
lnd <- readOGR(dsn = "data", "london_sport")
plot(lnd) # plot the lnd object (not shown)
nrow(lnd)
names(lnd)
lnd <- readOGR(dsn = "data", "london_sport")
plot(lnd) # plot the lnd object (not shown)
nrow(lnd) # return the number of rows (not shown)
nrow(lnd) # return the number of rows (not shown)
nrow(lnd) # return the number of rows (not shown)
# Create and look at new crime_data object
crime_data <- read.csv("data/mps-recordedcrime-borough.csv", stringsAsFactors = FALSE)
head(crime_data$CrimeType) # information about crime type
# Extract "Theft & Handling" crimes and save
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling", ] head(crime_theft, 2) # take a look at the result (replace 2 with 10 to see more rows)
crime_theft <- crime_data[crime_data$CrimeType == "Theft & Handling", ] head(crime_theft, 2) # take a look at the result (replace 2 with 10 to see more rows)
setwd("~/CompBio")
library(popbio)
# set up parameter sweep for species-area model
# first illustrate with for loop
# global variables
c <- c(0.1, 0.2, 0.5)
z <- c(0.16, 0.26)
A <- c(1,10,100,1000)
noise <- c(0,0.01,0.1)
nrep <- 100 # must be of length 1 to use the Map function
# set up parameter/output grid
modelSum <- expand.grid(nrep=nrep,c=c,z=z,A=A,noise=noise)
modelSum$meanS <- NA
modelSum$sdS <- NA
print(modelSum)
# create simple Species Area calculator function
SAcalc <- function(c=0.1,z=0.16,A=100,noise=0.1) {
S <- c*(A)^z + rnorm(n=1,mean=0,sd=noise)
return(S)
}
SAcalc()
# global variables
c <- c(0.1, 0.2, 0.5)
z <- c(0.16, 0.26)
A <- c(1,10,100,1000)
noise <- c(0,0.01,0.1)
nrep <- 100 # must be of length 1 to use the Map function
# set up parameter/output grid
modelSum <- expand.grid(nrep=nrep,c=c,z=z,A=A,noise=noise)
modelSum$meanS <- NA
modelSum$sdS <- NA
print(modelSum)
# create simple Species Area calculator function
SAcalc <- function(c=0.1,z=0.16,A=100,noise=0.1) {
S <- c*(A)^z + rnorm(n=1,mean=0,sd=noise)
return(S)
}
SAcalc()
# cycle through parameters with a for loop
for (i in 1:nrow(modelSum)) {
pars <- list(modelSum[i,2],
modelSum[i,3],
modelSum[i,4],
modelSum[i,5])
temp <-replicate(n=modelSum[i,1],do.call(SAcalc,pars))
modelSum$meanS[i] <- mean(temp)
modelSum$sdS[i]<- sd(temp)
}
print(modelSum)
# illustrate the basic map function
Map(SAcalc,modelSum$c,modelSum$z,modelSum$A,modelSum$noise)
# now repeat model calculations using only map, no for loops
temp <- replicate(nrep,unlist(Map(SAcalc,modelSum$c,modelSum$z,modelSum$A,modelSum$noise)))
modelSum$meanS[i] <- mean(temp)
modelSum$sdS[i]<- sd(temp)
print(modelSum)
# global variables
c <- c(0.1, 0.2, 0.5)
z <- c(0.16, 0.26)
A <- c(1,10,100,1000)
noise <- c(0,0.01,0.1)
nrep <- 100 # must be of length 1 to use the Map function
# set up parameter/output grid
modelSum <- expand.grid(nrep=nrep,c=c,z=z,A=A,noise=noise)
modelSum$meanS <- NA
modelSum$sdS <- NA
print(modelSum)
# create simple Species Area calculator function
SAcalc <- function(c=0.1,z=0.16,A=100,noise=0.1) {
S <- c*(A)^z + rnorm(n=1,mean=0,sd=noise)
return(S)
}
SAcalc()
# cycle through parameters with a for loop
for (i in 1:nrow(modelSum)) {
pars <- list(modelSum[i,2],
modelSum[i,3],
modelSum[i,4],
modelSum[i,5])
temp <-replicate(n=modelSum[i,1],do.call(SAcalc,pars))
modelSum$meanS[i] <- mean(temp)
modelSum$sdS[i]<- sd(temp)
}
print(modelSum)
# illustrate the basic map function
Map(SAcalc,modelSum$c,modelSum$z,modelSum$A,modelSum$noise)
# now repeat model calculations using only map, no for loops
temp <- replicate(nrep,unlist(Map(SAcalc,modelSum$c,modelSum$z,modelSum$A,modelSum$noise)))
modelSum$meanS[i] <- mean(temp)
modelSum$sdS[i]<- sd(temp)
print(modelSum)
par() # a ridiculous number of graphic parameters
opar <- par(no.readonly=TRUE) # store defaults of changeable options
Ant.Data <- read.table(file="antcountydata.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE)
attach(Ant.Data) # to cut down on typing of data frame name
plot(x=lat.centroid,y=n.species,log="y") # log transforms; use x,y, or xy
plot(x=lat.centroid,y=n.species)
abline(h=20) # drawing a horizontal line
abline(v=46,lwd=2,lty="twodash",col="grey") # drawing a vertical line
abline(a=-1600,b=40) # intercept and slope
abline(lm(n.species~lat.centroid)) # standard regression
lines(lowess(n.species~lat.centroid),col="blue",lty="dotdash",lwd=2.5)
rug(lat.centroid) # show the density of data points
rug(lat.centroid) # show the density of data points
rug(n.species,side=2) # can be done on any axis for any variable
grid()
box(which="outer") # box options: outer, inner, figure, plot
box(col="gray",lwd=5)
text(44,60,"my text here at 44,60")
# Standard Axes
par(opar)
par(opar)
par(opar)
x <- 1:1000
y <- runif(1000,0.2)
plot(x,y,type="l",col="grey",ylim=c(0,1.2))
grid(nx=NA,ny=NULL,col="black")
plot(x,y,type="l",col="grey",xlim=c(400,600),ylim=c(-1,1))
# use xlim and ylim reversed to flip axes
plot(x,y,,type="l",col="grey",xlim=c(1000,0))
# use lab for ticks x,y, len of label (default=7)
plot(x,y,type="l",col="grey",ylim=c(0,1.2),
lab=c(1,5,7))
# use mgp for lines of text from edge. 3 numbers are:
# 1) margin label; 2) tick mark labels; 3) axis line
# defaults are 3,1,0
plot(x,y,type="l",col="grey",ylim=c(0,1.2),
mgp=c(0,1,0)) # pulls in label
plot(x,y,type="l",col="grey",ylim=c(0,1.2),
mgp=c(3,-1,0)) # pulls in label to inside
plot(x,y,type="l",col="grey",ylim=c(0,1.2),
mgp=c(3,1,1)) # moves out entire axis
plot(x,y,type="l",col="grey",ylim=c(0,1.2),
tcl=1,lab=c(5,5,7))
par(pty="s")
plot(x,y,type="l",col="grey",xlim=c(-40,1000),ylim=c(0.17,1),
tcl=0.3,mgp=c(2,0.2,0),las=1,ann=FALSE,bty="L")
# use xlog in par or log in plot for transform
plot(x,y,type="l",col="grey",log="x")
# use xaxs and yaxs to control style of axis setting
# default = r = expanded range
# or set as i = exact range
par(pty="s")
par(mfrow=c(2,1))
par(mar=c(2,2,1,1))
plot(x,y,type="l",col="grey",ann=FALSE,xaxs="r")
plot(x,y,type="l",col="grey",ann=FALSE,xaxs="r")
plot(x,y,type="l",col="grey",ann=FALSE,xaxs="i")
Custom Axes
par(opar)
# create random data with gamma distribution
x <- 1:20
y <- rgamma(20,1,2)
# set x limit to avoid clipping at start
par(mar=c(5,4,4,4))
plot(x,y,type="b",pch=23,bg="slateblue",
xlim=c(0,20),ylim=c(0,1.3),
axes=FALSE,ann=FALSE)
# use sequence and take default tick labels
axis(1,at=seq(0,20,by=5))
# use mtext to add text labels in the margins
mtext("Time",1,line=3)
# use sequence and override with user labels
axis(2, at=seq(0,1.3,length=4),labels=c("low","med","high","peak"),
las=2)
# thicken up tick lines and move axis out a bit
axis(3,at=seq(0,20,by=5),line=1,lwd=2,lwd.ticks=2,font=2)
# move the axis and ticks inward with the mgp argument
axis(4,at=seq(0,1.3,length=4),labels=c("l","m","h","p"),
las=2,mgp=c(0,1.4,1.9),tcl=2,
col.axis="red",col="slateblue")
# overplot the axis to easily create minor tick marks
axis(4,at=seq(0,1.3,length=7),labels=FALSE,
mgp=c(0,1.4,1.9),tcl=0.75,
col="slateblue")
par(opar)
axis(4,at=seq(0,1.3,length=7),labels=FALSE,
mgp=c(0,1.4,1.9),tcl=0.75,
col="slateblue")
par(opar)
par(mar=c(5,6,2,2)+0.1)
plot(x=lat.centroid,y=n.species,
xlab="Latitude",ylab="Number of Species",
las=1,cex.axis=1.2,cex.lab=1.5)
reg.model <- lm(n.species~lat.centroid)
abline(reg.model)
rug(n.species,side=2)
grid()
#Text Annotations
x <- 1:5
y <- seq(1,5,1)
plot(x,y)
text(1,1,"right",pos=4) # use pos to offset the text
# use vectors for multiple plotting
plot(x,y,ann=FALSE, axes= FALSE, col="green")
box(col="gray")
text(x[-3],y[-3],c("right","top","bottom","left"),pos=c(4,3,1,2))
text(3,3,"overlay")
x <- 1:5
y <- seq(1,5,1)
plot(x,y)
text(1,1,"right",pos=4) # use pos to offset the text
# use vectors for multiple plotting
plot(x,y,ann=FALSE, axes= FALSE, col="green")
box(col="gray")
# use vectors for multiple plotting
plot(x,y,ann=FALSE, axes= FALSE, col="green")
box(col="gray")
text(x[-3],y[-3],c("right","top","bottom","left"),pos=c(4,3,1,2))
text(3,3,"overlay")
text(4,2,"angle = 10 degrees",srt=10)
# illustration of plot math
plot(x,y,ann=FALSE, axes= FALSE, type="n")
box(col="gray")
text(3,4,
expression(sqrt(x[i]^2+y[i]^2)-hat(beta)))
text(3,3,
expression(bar(x) == sum(frac(x[i], n),
i == 1,n)))
# alter size, color, font, and rotation
text(3,3,
expression(bar(x) == sum(frac(x[i], n),
i == 1,n)),
cex=4,col="red",font=1,srt=-10)
text(3,2,
expression(paste("Temperature (", degree,
"C) in 2013")))
# Graphical Annotations
x <- 1:10
y <-runif(10)
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,1))
points(x,y)
lines(x,y)
xspline(x,y,shape=0) # -1,0,1
xspline(x,y,shape=1,open=FALSE)
polygon(x,y,col="coral")
rect(8,0.1,10,0.2,col="blue")
rect(0,0,x,y,lty="dashed")
segments(0,1,3,0)
segments(0,0,x,y)
arrows(0,0,x,y)
points(0,0)
#Clean Up & Detach
detach(Ant.Data) # detach ant data
x <- 1:10
y <-runif(10)
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,1))
points(x,y)
lines(x,y)
x <- 1:10
y <-runif(10)
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,1))
points(x,y)
lines(x,y)
rect(8,0.1,10,0.2,col="blue")
rect(0,0,x,y,lty="dashed")
segments(0,1,3,0)
segments(0,0,x,y)
arrows(0,0,x,y)
points(0,0)
#Clean Up & Detach
detach(Ant.Data) # detach ant data
par(opar) # restore original parameters
x <- 1:10
y <-runif(10)
plot(x,y,type="n",xlim=c(0,10),ylim=c(0,1))
points(x,y)
lines(x,y)
xspline(x,y,shape=0) # -1,0,1
xspline(x,y,shape=1,open=FALSE)
polygon(x,y,col="coral")
rect(8,0.1,10,0.2,col="blue")
rect(0,0,x,y,lty="dashed")
segments(0,1,3,0)
segments(0,0,x,y)
arrows(0,0,x,y)
points(0,0)
Random.Data <- rnorm(20)
time <- 1:20
par(mfrow=c(3,2))
plot(Random.Data,type="p")
plot(Random.Data,type="l")
plot(Random.Data,type="b")
plot(Random.Data,type="o")
plot(Random.Data,type="s")
plot(Random.Data,type="h")
par(opar)
plot(Random.Data,type="n")
Random.Data <- rnorm(20)
time <- 1:20
par(mfrow=c(3,2))
plot(Random.Data,type="p")
plot(Random.Data,type="l")
plot(Random.Data,type="b")
plot(Random.Data,type="o")
plot(Random.Data,type="s")
plot(Random.Data,type="h")
par(opar)
plot(Random.Data,type="n")
par(mfrow=c(2,2))
Ant.Model <- lm(n.species~lat.centroid)
summary(Ant.Model)
plot(Ant.Model)
plot(lat.centroid,n.species)
abline(Ant.Model)
abline(h=10,lty="dashed")
abline(v=45,col="red",lty="dotdash")
par(mfrow=c(1,2))
plot(n.species) # plots numeric data in order
plot(table(ecoregion)) # plots tabled counts of factors as lines
attach(Ant.Data)
####################################################
# illustrating special plots that come with a linear model
par(mfrow=c(2,2))
Ant.Model <- lm(n.species~lat.centroid)
summary(Ant.Model)
plot(Ant.Model)
plot(lat.centroid,n.species)
abline(Ant.Model)
abline(h=10,lty="dashed")
abline(v=45,col="red",lty="dotdash")
# Plots In A Single Dimension
# illustrating plots for a single dimension of data
par(mfrow=c(1,2))
plot(n.species) # plots numeric data in order
plot(table(ecoregion)) # plots tabled counts of factors as lines
barplot(table(ecoregion))
Little.Data <- c(3,2,1,5,6)
names(Little.Data) <- LETTERS[1:5]
barplot(Little.Data) # plots numeric data as bar heights
pie(Little.Data) # plots numeric data as pie slices
dotchart(Little.Data) # plots numeric data as ordered dot plots
boxplot(n.species) # plots numeric data as box plot
hist(n.species) # plots numeric data as histogram
stripchart(Little.Data) # plots numeric data in a single strip chart
plot(density(n.species)) # plots kernel density of a numeric variable
par(mfrow=c(1,2))
plot(n.species) # plots numeric data in order
plot(table(ecoregion)) # plots tabled counts of factors as lines
barplot(table(ecoregion))
Little.Data <- c(3,2,1,5,6)
names(Little.Data) <- LETTERS[1:5]
barplot(Little.Data) # plots numeric
ie(Little.Data) # plots numeric data as pie slices
dotchart(Little.Data) # plots numeric data as ordered dot plots
boxplot(n.species) # plots numeric data as box plot
hist(n.species) # plots numeric data as histogram
stripchart(Little.Data) # plots numeric data in a single strip chart
plot(density(n.species)) # p
ecoregion.means <- by(n.species,ecoregion,mean)
barplot(ecoregion.means,names.arg=letters[1:5],
ylim=c(0,100))
midpoints <- barplot(ecoregion.means,plot=FALSE)
ecoregion.sd <- by(n.species,ecoregion,sd)
arrows(midpoints,ecoregion.means,midpoints,
ecoregion.means+ecoregion.sd,angle=90,
length=0.1)
ecoregion.means <- by(n.species,ecoregion,mean)
barplot(ecoregion.means,names.arg=letters[1:5],
ylim=c(0,100))
midpoints <- barplot(ecoregion.means,plot=FALSE)
ecoregion.sd <- by(n.species,ecoregion,sd)
arrows(midpoints,ecoregion.means,midpoints,
ecoregion.means+ecoregion.sd,angle=90,
length=0.1)
# For a double-headed arrow, adjust starting
# points and use code=3
arrows(midpoints,ecoregion.means-ecoregion.sd,midpoints,
ecoregion.means+ecoregion.sd,angle=90,
length=0.1,code=3)
points(midpoints,ecoregion.means,pch=19)
par(opar)
# using the quantile function
z <- rnorm(1000)
quantile(z,probs=0.95)
hist(z)
abline(v=quantile(z,probs=c(0.05,0.95)),lty="dashed",col="red")
abline(v=quantile(z,probs=c(0.025,0.975)),lty="dotted",col="blue")
# Calculate Confidence intervals with the by function
quantile(n.species,probs=0.025)
Con.low <- by(n.species,ecoregion,quantile,probs=0.025)
Con.high <- by(n.species,ecoregion,quantile,probs=0.975)
# set up a blank plot (show code first)
plot(1:5,1:5)
plot(1:5,1:5,xlim=c(0.5,5),ylim=c(0,100))
plot(1:5,1:5,xlim=c(0.5,5),ylim=c(0,100),type="n")
plot(1:5,1:5,xlim=c(0.5,5),ylim=c(0,100),type="n",
axes= FALSE,ann=FALSE)
# add axes with labels
axis(1,at=seq(1:5),labels=letters[1:5])
axis(2)
mtext("Number of Species",side=2,line=2.5)
box(bty="L")
arrows(1:5,ecoregion.means,1:5,Con.low,angle=90,length=0.1)
arrows(1:5,ecoregion.means,1:5,Con.high,angle=90,length=0.1)
points(1:5,ecoregion.means,pch=23,cex=1.5,bg="gold")
abline(h=seq(0,100,by=20),col="gray",lty="dotted")
# add minor tick marks
# first find your location in the plot
points(1,0)
points(0,0)
points(0.5,0)
par("usr") # get limits
# try plotting a point points(0.32,10)
points(0.32,10)
par("xpd")
par(xpd=TRUE) # change clippig to figure region
points(0.32,10)
segments(rep(0.32,5),seq(10,90,length=5),rep(0,5),seq(10,90,length=5))
